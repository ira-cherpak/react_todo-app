{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","index.js"],"names":["TodoItem","todo","onChangeStatus","className","classnames","completed","type","onChange","id","checked","title","TodoList","todos","map","key","App","useState","setTodos","todoTitle","setTodoTitle","isComplited","setIsComplited","unCompleted","filter","onSubmit","event","preventDefault","trim","length","newTodo","Date","addTodo","placeholder","value","target","htmlFor","todoId","prevTodos","every","href","ReactDOM","render","document","getElementById"],"mappings":"4TAIaA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,eAAT,OACtB,wBAAIC,UAAWC,IAAW,CAAEC,UAAWJ,EAAKI,aAC1C,yBAAKF,UAAU,QACb,2BACEG,KAAK,WACLH,UAAU,SACVI,SAAU,kBAAML,EAAeD,EAAKO,KACpCC,QAASR,EAAKI,YAEhB,+BAAQJ,EAAKS,OACb,4BAAQJ,KAAK,SAASH,UAAU,aAElC,2BAAOG,KAAK,OAAOH,UAAU,WCZpBQ,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOV,EAAV,EAAUA,eAAV,OACtB,wBAAIC,UAAU,aACXS,EAAMC,KAAI,SAAAZ,GAAI,OACb,kBAAC,EAAD,CAAUa,IAAKb,EAAKO,GAAIP,KAAMA,EAAMC,eAAgBA,SCsH3Ca,MA1Hf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNJ,EADM,KACCK,EADD,OAEqBD,mBAAS,IAF9B,mBAENE,EAFM,KAEKC,EAFL,OAGyBH,oBAAS,GAHlC,mBAGNI,EAHM,KAGOC,EAHP,KAmBPC,EAAcV,EAAMW,QAAO,SAAAtB,GAAI,OAAKA,EAAKI,aAqC/C,OACE,6BAASF,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,0BAAMqB,SAAU,SAACC,GACfA,EAAMC,iBAzDE,WACd,GAAIR,EAAUS,OAAOC,OAAS,EAAG,CAC/B,IAAMC,EAAU,CACdrB,IAAK,IAAIsB,KACTpB,MAAOQ,EACPb,WAAW,GAGbY,EAAS,GAAD,mBAAKL,GAAL,CAAYiB,KAGtBV,EAAa,IA+CPY,KAGA,2BACEzB,KAAK,OACLH,UAAU,WACV6B,YAAY,yBACZC,MAAOf,EACPX,SAAU,SAACkB,GACTN,EAAaM,EAAMS,OAAOD,YAMlC,6BAAS9B,UAAU,QACjB,2BACEG,KAAK,WACLE,GAAG,aACHL,UAAU,aACVI,SA3CU,WAEdU,EADEG,EACOR,EAAMC,KAAI,SAAAZ,GAAI,kCAClBA,GADkB,IAErBI,WAAW,OAGJO,EAAMC,KAAI,SAAAZ,GAAI,kCAClBA,GADkB,IAErBI,WAAW,QAIfgB,GAAgBD,IA+BVX,QAASW,IAEX,2BAAOe,QAAQ,cAAf,wBACA,kBAAC,EAAD,CACEvB,MAAOA,EACPV,eApEe,SAACkC,GACtBnB,GAAS,SAAAoB,GAAS,OAAIA,EAAUxB,KAAI,SAACZ,GACnC,OAAIA,EAAKO,KAAO4B,EACP,2BACFnC,GADL,IAEEI,WAAYJ,EAAKI,YAIdJ,QAGLW,EAAM0B,OAAM,SAAArC,GAAI,OAAIA,EAAKI,aAC3BgB,GAAe,GAEfA,GAAe,OAyDf,4BAAQlB,UAAU,UAChB,0BAAMA,UAAU,cACbmB,EAAYM,OACZ,IAFH,cAMA,wBAAIzB,UAAU,WACZ,4BACE,uBAAGoC,KAAK,KAAKpC,UAAU,YAAvB,QAGF,4BACE,uBAAGoC,KAAK,YAAR,WAGF,4BACE,uBAAGA,KAAK,eAAR,eAIJ,4BAAQjC,KAAK,SAASH,UAAU,mBAAhC,sBC5GRqC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f89769f7.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ todo, onChangeStatus }) => (\n  <li className={classnames({ completed: todo.completed })}>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        onChange={() => onChangeStatus(todo.id)}\n        checked={todo.completed}\n      />\n      <label>{todo.title}</label>\n      <button type=\"button\" className=\"destroy\" />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onChangeStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, onChangeStatus }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem key={todo.id} todo={todo} onChangeStatus={onChangeStatus} />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n  onChangeStatus: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { TodoList } from './TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [isComplited, setIsComplited] = useState(false);\n\n  const addTodo = () => {\n    if (todoTitle.trim().length > 0) {\n      const newTodo = {\n        id: +new Date(),\n        title: todoTitle,\n        completed: false,\n      };\n\n      setTodos([...todos, newTodo]);\n    }\n\n    setTodoTitle('');\n  };\n\n  const unCompleted = todos.filter(todo => !todo.completed);\n\n  const onChangeStatus = (todoId) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n\n    if (todos.every(todo => todo.completed)) {\n      setIsComplited(true);\n    } else {\n      setIsComplited(false);\n    }\n  };\n\n  const toggleAll = () => {\n    if (isComplited) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n\n    setIsComplited(!isComplited);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          addTodo();\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={todoTitle}\n            onChange={(event) => {\n              setTodoTitle(event.target.value);\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAll}\n          checked={isComplited}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList\n          todos={todos}\n          onChangeStatus={onChangeStatus}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {unCompleted.length}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a href=\"#/completed\">Completed</a>\n          </li>\n        </ul>\n\n        <button type=\"button\" className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}