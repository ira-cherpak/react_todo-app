{"version":3,"sources":["TodoItem.js","TodoList.js","TodosFilter.js","App.js","index.js"],"names":["TodoItem","todo","onChangeStatus","className","classnames","completed","type","onChange","id","checked","title","TodoList","todos","map","key","TodosFilter","selectedFilter","setFilter","handleFilter","event","preventDefault","target","name","href","selected","onClick","App","useState","setTodos","todoTitle","setTodoTitle","toggleStatus","setToggle","unCompleted","filter","filteredTodos","filterTodos","All","Active","Completed","onSubmit","trim","length","newTodo","Date","addTodo","placeholder","value","htmlFor","todoId","prevTodos","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62cdec6d.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ todo, onChangeStatus }) => (\n  <li className={classnames({ completed: todo.completed })}>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        onChange={() => onChangeStatus(todo.id)}\n        checked={todo.completed}\n      />\n      <label>{todo.title}</label>\n      <button type=\"button\" className=\"destroy\" />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onChangeStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos, onChangeStatus }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        onChangeStatus={onChangeStatus}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\n  onChangeStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport const TodosFilter = ({ selectedFilter, setFilter }) => {\n  const handleFilter = (event) => {\n    event.preventDefault();\n\n    setFilter(event.target.name);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classnames({ selected: selectedFilter === 'All' })}\n          name=\"All\"\n          onClick={handleFilter}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classnames({ selected: selectedFilter === 'Active' })}\n          name=\"Active\"\n          onClick={handleFilter}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classnames({ selected: selectedFilter === 'Completed' })}\n          name=\"Completed\"\n          onClick={handleFilter}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  selectedFilter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { TodoList } from './TodoList';\nimport { TodosFilter } from './TodosFilter';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [toggleStatus, setToggle] = useState(true);\n  const [selectedFilter, setFilter] = useState('All');\n\n  const addTodo = () => {\n    if (todoTitle.trim().length > 0) {\n      const newTodo = {\n        id: +new Date(),\n        title: todoTitle,\n        completed: false,\n      };\n\n      setTodos([...todos, newTodo]);\n    }\n\n    setTodoTitle('');\n  };\n\n  const unCompleted = todos.filter(todo => !todo.completed);\n  const completed = todos.filter(todo => todo.completed);\n\n  const onChangeStatus = (todoId) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n\n    if (todos.every(todo => todo.completed)) {\n      setToggle(false);\n    } else {\n      setToggle(true);\n    }\n  };\n\n  const toggleAll = () => {\n    setTodos(todos.map(todo => (\n      { ...todo, completed: toggleStatus }\n    )));\n    setToggle(!toggleStatus);\n  };\n\n  const FILTERS = {\n    All: 'All',\n    Active: 'Active',\n    Completed: 'Completed',\n  };\n\n  const filterTodos = (key) => {\n    switch (key) {\n      case 'All':\n        return todos;\n\n      case 'Active':\n        return unCompleted;\n\n      case 'Completed':\n        return completed;\n\n      default:\n        return todos;\n    }\n  };\n\n  const filteredTodos = filterTodos(FILTERS[selectedFilter]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          addTodo();\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={todoTitle}\n            onChange={(event) => {\n              setTodoTitle(event.target.value);\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAll}\n          checked={!unCompleted.length > 0}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList\n          todos={filteredTodos}\n          onChangeStatus={onChangeStatus}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {unCompleted.length}\n          {' '}\n          items left\n        </span>\n\n        <TodosFilter\n          setFilter={setFilter}\n          selectedFilter={selectedFilter}\n        />\n\n        <button type=\"button\" className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}