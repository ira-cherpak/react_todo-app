{"version":3,"sources":["TodoItem.js","TodoList.js","Const.js","TodosFilter.js","App.js","index.js"],"names":["TodoItem","todo","onStatusChange","deleteTodo","updateTitle","useState","isEditable","setIsEditable","newTitle","setNewTitle","className","classnames","completed","editing","onDoubleClick","id","type","onChange","checked","title","value","event","target","trim","onKeyUp","key","onBlur","todoTitle","todoId","TodoList","todos","map","FILTERS","All","Active","Completed","TodosFilter","selectedFilter","setSelectedFilter","handleFilter","preventDefault","name","href","selected","onClick","App","setTodos","setTodoTitle","activeTodos","filter","completedTodos","filteredTodos","filterTodos","onSubmit","length","newTodo","Date","addTodo","placeholder","eventChecked","prevTodos","htmlFor","todoID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d7eb538.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ todo, onStatusChange, deleteTodo, updateTitle }) => {\n  const [isEditable, setIsEditable] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n\n  const keyDownHandler = (event) => {\n    const { key } = event;\n\n    switch (key) {\n      case 'Enter':\n        updateTitle(todo.id, newTitle);\n        setIsEditable(false);\n        break;\n\n      case 'Escape':\n        setNewTitle(todo.title);\n        updateTitle(todo.id, todo.title);\n        setIsEditable(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = (todoTitle, todoId) => {\n    updateTitle(todoTitle, todoId);\n\n    setIsEditable(false);\n  };\n\n  return (\n    <li\n      className={classnames(\n        { completed: todo.completed },\n        { editing: isEditable },\n      )}\n      onDoubleClick={() => setIsEditable(todo.id)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => onStatusChange(todo.id)}\n          checked={todo.completed}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onChange={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => setNewTitle(event.target.value.trim())}\n        onKeyUp={keyDownHandler}\n        onBlur={handleBlur}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onStatusChange: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todos,\n  onStatusChange,\n  deleteTodo,\n  updateTitle,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        onStatusChange={onStatusChange}\n        deleteTodo={deleteTodo}\n        updateTitle={updateTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\n  onStatusChange: PropTypes.func.isRequired,\n  updateTitle: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  All: 'All',\n  Active: 'Active',\n  Completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { FILTERS } from './Const';\n\nexport const TodosFilter = ({ selectedFilter, setSelectedFilter }) => {\n  const handleFilter = (event) => {\n    event.preventDefault();\n\n    setSelectedFilter(event.target.name);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={classnames({ selected: selectedFilter === FILTERS.All })}\n          name=\"All\"\n          onClick={handleFilter}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={classnames(\n            { selected: selectedFilter === FILTERS.Active },\n          )}\n          name=\"Active\"\n          onClick={handleFilter}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={classnames(\n            { selected: selectedFilter === FILTERS.Completed },\n          )}\n          name=\"Completed\"\n          onClick={handleFilter}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  selectedFilter: PropTypes.string.isRequired,\n  setSelectedFilter: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { TodoList } from './TodoList';\nimport { TodosFilter } from './TodosFilter';\nimport { FILTERS } from './Const';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState('All');\n\n  const addTodo = () => {\n    if (todoTitle.trim().length > 0) {\n      const newTodo = {\n        id: +new Date(),\n        title: todoTitle,\n        completed: false,\n      };\n\n      setTodos([...todos, newTodo]);\n    }\n\n    setTodoTitle('');\n  };\n\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const onStatusChange = (todoId) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const toggleAll = (event) => {\n    const eventChecked = event.target.checked;\n\n    setTodos(prevTodos => prevTodos.map(todo => (\n      { ...todo, completed: eventChecked }\n    )));\n  };\n\n  const filterTodos = (key) => {\n    switch (key) {\n      case FILTERS.Active:\n        return activeTodos;\n\n      case FILTERS.Completed:\n        return completedTodos;\n\n      default:\n        return todos;\n    }\n  };\n\n  const filteredTodos = filterTodos(FILTERS[selectedFilter]);\n\n  const deleteTodo = (todoID) => {\n    setTodos(todos.filter(todo => todo.id !== todoID));\n  };\n\n  const clearCompleted = () => {\n    setTodos(activeTodos);\n  };\n\n  const updateTitle = (todoId, title) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todos,\n          title,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          addTodo();\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={todoTitle}\n            onChange={(event) => {\n              setTodoTitle(event.target.value);\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAll}\n          checked={activeTodos.length === 0}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList\n          todos={filteredTodos}\n          onStatusChange={onStatusChange}\n          deleteTodo={deleteTodo}\n          updateTitle={updateTitle}\n        />\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {activeTodos.length}\n            {' '}\n            items left\n          </span>\n\n          <TodosFilter\n            setSelectedFilter={setSelectedFilter}\n            selectedFilter={selectedFilter}\n          />\n\n          {completedTodos.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}