{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","index.js"],"names":["TodoItem","title","completed","useState","isCompleted","setIsCompleted","className","classnames","type","onClick","current","TodoList","todos","map","todo","key","id","App","setTodos","todoTitle","setTodoTitle","isComplited","setIsComplited","notCompleted","filter","onSubmit","event","preventDefault","trim","length","newTodo","Date","addTodo","placeholder","value","onChange","target","htmlFor","href","ReactDOM","render","document","getElementById"],"mappings":"4TAIaA,EAAW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAAgB,EACVC,mBAASD,GADC,mBACzCE,EADyC,KAC5BC,EAD4B,KAGhD,OACE,wBAAIC,UAAWC,IAAW,CAAEL,UAAWE,KACrC,yBAAKE,UAAU,QACb,2BACEE,KAAK,WACLF,UAAU,SACVG,QAAS,kBAAMJ,GAAe,SAAAK,GAAO,OAAKA,QAE5C,+BAAQT,GACR,4BAAQO,KAAK,SAASF,UAAU,aAElC,2BAAOE,KAAK,OAAOF,UAAU,WCdtBK,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,wBAAIN,UAAU,aACXM,EAAMC,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,eAAUC,IAAKD,EAAKE,IAAQF,SC+FnBG,MAnGf,WAAgB,IAAD,EACad,mBAAS,IADtB,mBACNS,EADM,KACCM,EADD,OAEqBf,mBAAS,IAF9B,mBAENgB,EAFM,KAEKC,EAFL,OAGyBjB,oBAAS,GAHlC,mBAGNkB,EAHM,KAGOC,EAHP,KAmBPC,EAAeX,EAAMY,QAAO,SAAAV,GAAI,OAAKA,EAAKZ,aAkBhD,OACE,6BAASI,UAAU,WACjB,4BAAQA,UAAU,UAChB,yCAEA,0BAAMmB,SAAU,SAACC,GACfA,EAAMC,iBAtCE,WACd,GAAIR,EAAUS,OAAOC,OAAS,EAAG,CAC/B,IAAMC,EAAU,CACdd,IAAK,IAAIe,KACT9B,MAAOkB,EACPjB,WAAW,GAGbgB,EAAS,GAAD,mBAAKN,GAAL,CAAYkB,KAGtBV,EAAa,IA4BPY,KAGA,2BACExB,KAAK,OACLF,UAAU,WACV2B,YAAY,yBACZC,MAAOf,EACPgB,SAAU,SAACT,GACTN,EAAaM,EAAMU,OAAOF,YAMlC,6BAAS5B,UAAU,QACjB,2BACEE,KAAK,WACLQ,GAAG,aACHV,UAAU,aACV6B,SA3Ce,WAEnBjB,EADEG,EACOT,EAAMC,KAAI,SAAAC,GAAI,kCAClBA,GADkB,IAErBZ,WAAW,OAGJU,EAAMC,KAAI,SAAAC,GAAI,kCAClBA,GADkB,IAErBZ,WAAW,QAIfoB,GAAgBD,MAgCZ,2BAAOgB,QAAQ,cAAf,wBACA,kBAAC,EAAD,CAAUzB,MAAOA,KAGnB,4BAAQN,UAAU,UAChB,0BAAMA,UAAU,cACbiB,EAAaM,OACb,IAFH,cAMA,wBAAIvB,UAAU,WACZ,4BACE,uBAAGgC,KAAK,KAAKhC,UAAU,YAAvB,QAGF,4BACE,uBAAGgC,KAAK,YAAR,WAGF,4BACE,uBAAGA,KAAK,eAAR,eAIJ,4BAAQ9B,KAAK,SAASF,UAAU,mBAAhC,sBCrFRiC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.9f25ffb1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ title, completed }) => {\n  const [isCompleted, setIsCompleted] = useState(completed);\n\n  return (\n    <li className={classnames({ completed: isCompleted })}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onClick={() => setIsCompleted(current => !current)}\n        />\n        <label>{title}</label>\n        <button type=\"button\" className=\"destroy\" />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({ todos }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem key={todo.id} {...todo} />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired).isRequired,\n};\n","import React, { useState } from 'react';\nimport { TodoList } from './TodoList';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [isComplited, setIsComplited] = useState(false);\n\n  const addTodo = () => {\n    if (todoTitle.trim().length > 0) {\n      const newTodo = {\n        id: +new Date(),\n        title: todoTitle,\n        completed: false,\n      };\n\n      setTodos([...todos, newTodo]);\n    }\n\n    setTodoTitle('');\n  };\n\n  const notCompleted = todos.filter(todo => !todo.completed);\n\n  const onChangeStatus = () => {\n    if (isComplited) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n\n    setIsComplited(!isComplited);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          addTodo();\n        }}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={todoTitle}\n            onChange={(event) => {\n              setTodoTitle(event.target.value);\n            }}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={onChangeStatus}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList todos={todos} />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {notCompleted.length}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a href=\"#/completed\">Completed</a>\n          </li>\n        </ul>\n\n        <button type=\"button\" className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}